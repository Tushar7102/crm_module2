{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tushar/OneDrive/Desktop/crm_module/client/src/lib/mock-data.ts"],"sourcesContent":["import { Lead } from '@/types';\n\n// Mock database of leads\nexport const mockLeads: Lead[] = [\n  {\n    id: '1',\n    name: 'Acme Corporation',\n    contactName: 'John Smith',\n    email: 'john.smith@acme.com',\n    phone: '+1 (555) 123-4567',\n    status: 'new',\n    source: 'website',\n    assignedTo: '2', // Jane Smith's ID\n    notes: 'Interested in our enterprise solution',\n    createdAt: '2023-06-15T10:30:00.000Z',\n    updatedAt: '2023-06-15T10:30:00.000Z',\n  },\n  {\n    id: '2',\n    name: 'XYZ Industries',\n    contactName: 'Sarah Johnson',\n    email: 'sarah.j@xyz-industries.com',\n    phone: '+1 (555) 987-6543',\n    status: 'contacted',\n    source: 'referral',\n    assignedTo: '2', // Jane Smith's ID\n    notes: 'Follow up after initial call',\n    createdAt: '2023-06-10T14:45:00.000Z',\n    updatedAt: '2023-06-12T09:15:00.000Z',\n  },\n  {\n    id: '3',\n    name: 'Global Tech Solutions',\n    contactName: 'Michael Brown',\n    email: 'm.brown@globaltech.com',\n    phone: '+1 (555) 456-7890',\n    status: 'qualified',\n    source: 'trade_show',\n    assignedTo: '3', // Mike Johnson's ID\n    notes: 'Met at Tech Expo 2023, very interested in our new product line',\n    createdAt: '2023-06-05T11:20:00.000Z',\n    updatedAt: '2023-06-08T16:30:00.000Z',\n  },\n  {\n    id: '4',\n    name: 'Sunshine Retail',\n    contactName: 'Emma Wilson',\n    email: 'emma@sunshineretail.com',\n    phone: '+1 (555) 789-0123',\n    status: 'new',\n    source: 'website',\n    assignedTo: '1', // John Doe's ID\n    notes: 'Looking for inventory management solutions',\n    createdAt: '2023-06-02T09:10:00.000Z',\n    updatedAt: '2023-06-02T09:10:00.000Z',\n  },\n  {\n    id: '5',\n    name: 'City Services Inc',\n    contactName: 'David Clark',\n    email: 'd.clark@cityservices.com',\n    phone: '+1 (555) 234-5678',\n    status: 'contacted',\n    source: 'cold_call',\n    assignedTo: '3', // Mike Johnson's ID\n    notes: 'Scheduled follow-up call for next week',\n    createdAt: '2023-05-28T15:20:00.000Z',\n    updatedAt: '2023-05-30T11:45:00.000Z',\n  }\n];"],"names":[],"mappings":";;;AAGO,MAAM,YAAoB;IAC/B;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,OAAO;QACP,WAAW;QACX,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,OAAO;QACP,WAAW;QACX,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,OAAO;QACP,WAAW;QACX,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,OAAO;QACP,WAAW;QACX,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,OAAO;QACP,WAAW;QACX,WAAW;IACb;CACD","debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tushar/OneDrive/Desktop/crm_module/client/src/app/api/leads/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { Lead } from '@/types';\nimport { mockLeads } from '@/lib/mock-data';\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Ensure params is properly handled as it should be awaited in Next.js App Router\n    const { id } = await params;\n    \n    // Find the lead in our mock database\n    const lead = mockLeads.find((l) => l.id === id);\n\n    if (!lead) {\n      return NextResponse.json(\n        { error: 'Lead not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(lead);\n  } catch (error) {\n    console.error('Error fetching lead:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch lead' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Ensure params is properly handled as it should be awaited in Next.js App Router\n    const { id } = await params;\n    \n    const body = await request.json();\n    const leadIndex = mockLeads.findIndex((l) => l.id === id);\n\n    if (leadIndex === -1) {\n      return NextResponse.json(\n        { error: 'Lead not found' },\n        { status: 404 }\n      );\n    }\n\n    // In a real application, you would update the lead in your database\n    // For now, we'll just return the updated lead\n    const updatedLead: Lead = {\n      ...mockLeads[leadIndex],\n      ...body,\n      id: id, // Ensure ID doesn't change\n      updatedAt: new Date().toISOString(),\n    };\n    \n    // Update the lead in our mock database\n    mockLeads[leadIndex] = updatedLead;\n\n    return NextResponse.json(updatedLead);\n  } catch (error) {\n    console.error('Error updating lead:', error);\n    return NextResponse.json(\n      { error: 'Failed to update lead' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Ensure params is properly handled as it should be awaited in Next.js App Router\n    const { id } = await params;\n    \n    const leadIndex = mockLeads.findIndex((l) => l.id === id);\n\n    if (leadIndex === -1) {\n      return NextResponse.json(\n        { error: 'Lead not found' },\n        { status: 404 }\n      );\n    }\n\n    // In a real application, you would delete the lead from your database\n    // For now, we'll just simulate deletion by removing from our mock array\n    mockLeads.splice(leadIndex, 1);\n    \n    return NextResponse.json(\n      { message: 'Lead deleted successfully' },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Error deleting lead:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete lead' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;;AAAA;AAEA;;;AAEO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,kFAAkF;QAClF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QAErB,qCAAqC;QACrC,MAAM,OAAO,4HAAA,CAAA,YAAS,CAAC,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;QAE5C,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,kFAAkF;QAClF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QAErB,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,YAAY,4HAAA,CAAA,YAAS,CAAC,SAAS,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;QAEtD,IAAI,cAAc,CAAC,GAAG;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,oEAAoE;QACpE,8CAA8C;QAC9C,MAAM,cAAoB;YACxB,GAAG,4HAAA,CAAA,YAAS,CAAC,UAAU;YACvB,GAAG,IAAI;YACP,IAAI;YACJ,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,uCAAuC;QACvC,4HAAA,CAAA,YAAS,CAAC,UAAU,GAAG;QAEvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,kFAAkF;QAClF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QAErB,MAAM,YAAY,4HAAA,CAAA,YAAS,CAAC,SAAS,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;QAEtD,IAAI,cAAc,CAAC,GAAG;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,sEAAsE;QACtE,wEAAwE;QACxE,4HAAA,CAAA,YAAS,CAAC,MAAM,CAAC,WAAW;QAE5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA4B,GACvC;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}