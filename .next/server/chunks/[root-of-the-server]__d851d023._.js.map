{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tushar/OneDrive/Desktop/crm_module/client/src/app/api/leads/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { Lead } from '@/types';\n\n// Mock database of leads\nconst mockLeads: Lead[] = [\n  {\n    id: '1',\n    name: 'Acme Corporation',\n    contactName: 'John Smith',\n    email: 'john.smith@acme.com',\n    phone: '+1 (555) 123-4567',\n    status: 'new',\n    source: 'website',\n    assignedTo: '2', // Jane Smith's ID\n    notes: 'Interested in our enterprise solution',\n    createdAt: '2023-06-15T10:30:00.000Z',\n    updatedAt: '2023-06-15T10:30:00.000Z',\n  },\n  {\n    id: '2',\n    name: 'XYZ Industries',\n    contactName: 'Sarah Johnson',\n    email: 'sarah.j@xyz-industries.com',\n    phone: '+1 (555) 987-6543',\n    status: 'contacted',\n    source: 'referral',\n    assignedTo: '2', // Jane Smith's ID\n    notes: 'Follow up after initial call',\n    createdAt: '2023-06-10T14:45:00.000Z',\n    updatedAt: '2023-06-12T09:15:00.000Z',\n  },\n  {\n    id: '3',\n    name: 'Global Tech Solutions',\n    contactName: 'Michael Brown',\n    email: 'm.brown@globaltech.com',\n    phone: '+1 (555) 456-7890',\n    status: 'qualified',\n    source: 'trade_show',\n    assignedTo: '3', // Mike Johnson's ID\n    notes: 'Met at Tech Expo 2023, very interested in our new product line',\n    createdAt: '2023-06-05T11:20:00.000Z',\n    updatedAt: '2023-06-08T16:30:00.000Z',\n  },\n  {\n    id: '4',\n    name: 'Sunshine Retail',\n    contactName: 'Emma Wilson',\n    email: 'emma@sunshineretail.com',\n    phone: '+1 (555) 789-0123',\n    status: 'unqualified',\n    source: 'cold_call',\n    assignedTo: '2', // Jane Smith's ID\n    notes: 'Not interested at this time, revisit in 6 months',\n    createdAt: '2023-06-02T09:10:00.000Z',\n    updatedAt: '2023-06-03T13:45:00.000Z',\n  },\n  {\n    id: '5',\n    name: 'Innovative Solutions Inc',\n    contactName: 'David Lee',\n    email: 'david.lee@innovative.com',\n    phone: '+1 (555) 234-5678',\n    status: 'new',\n    source: 'email_campaign',\n    assignedTo: '3', // Mike Johnson's ID\n    notes: 'Responded to our Q2 email campaign',\n    createdAt: '2023-06-01T15:30:00.000Z',\n    updatedAt: '2023-06-01T15:30:00.000Z',\n  },\n];\n\nexport async function GET(request: Request) {\n  // Get URL parameters for filtering and pagination\n  const { searchParams } = new URL(request.url);\n  const status = searchParams.get('status');\n  const source = searchParams.get('source');\n  const assignedTo = searchParams.get('assignedTo');\n  const page = parseInt(searchParams.get('page') || '1');\n  const limit = parseInt(searchParams.get('limit') || '10');\n\n  // Apply filters\n  let filteredLeads = [...mockLeads];\n  \n  if (status) {\n    filteredLeads = filteredLeads.filter(lead => lead.status === status);\n  }\n  \n  if (source) {\n    filteredLeads = filteredLeads.filter(lead => lead.source === source);\n  }\n  \n  if (assignedTo) {\n    filteredLeads = filteredLeads.filter(lead => lead.assignedTo === assignedTo);\n  }\n\n  // Sort by most recent\n  filteredLeads.sort((a, b) => {\n    return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n  });\n\n  // Apply pagination\n  const startIndex = (page - 1) * limit;\n  const endIndex = page * limit;\n  const paginatedLeads = filteredLeads.slice(startIndex, endIndex);\n\n  // Prepare response with pagination metadata\n  const response = {\n    data: paginatedLeads,\n    pagination: {\n      total: filteredLeads.length,\n      page,\n      limit,\n      pages: Math.ceil(filteredLeads.length / limit),\n    },\n  };\n\n  return NextResponse.json(response);\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    \n    // In a real application, you would validate and save the lead to your database\n    // For now, we'll just return the lead with a mock ID\n    const newLead: Lead = {\n      id: Math.random().toString(36).substring(2, 9), // Generate a random ID\n      ...body,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    \n    return NextResponse.json(newLead, { status: 201 });\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to create lead' },\n      { status: 400 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAGA,yBAAyB;AACzB,MAAM,YAAoB;IACxB;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,OAAO;QACP,WAAW;QACX,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,OAAO;QACP,WAAW;QACX,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,OAAO;QACP,WAAW;QACX,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,OAAO;QACP,WAAW;QACX,WAAW;IACb;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;QACP,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,YAAY;QACZ,OAAO;QACP,WAAW;QACX,WAAW;IACb;CACD;AAEM,eAAe,IAAI,OAAgB;IACxC,kDAAkD;IAClD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;IAChC,MAAM,SAAS,aAAa,GAAG,CAAC;IAChC,MAAM,aAAa,aAAa,GAAG,CAAC;IACpC,MAAM,OAAO,SAAS,aAAa,GAAG,CAAC,WAAW;IAClD,MAAM,QAAQ,SAAS,aAAa,GAAG,CAAC,YAAY;IAEpD,gBAAgB;IAChB,IAAI,gBAAgB;WAAI;KAAU;IAElC,IAAI,QAAQ;QACV,gBAAgB,cAAc,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,KAAK;IAC/D;IAEA,IAAI,QAAQ;QACV,gBAAgB,cAAc,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,KAAK;IAC/D;IAEA,IAAI,YAAY;QACd,gBAAgB,cAAc,MAAM,CAAC,CAAA,OAAQ,KAAK,UAAU,KAAK;IACnE;IAEA,sBAAsB;IACtB,cAAc,IAAI,CAAC,CAAC,GAAG;QACrB,OAAO,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;IACxE;IAEA,mBAAmB;IACnB,MAAM,aAAa,CAAC,OAAO,CAAC,IAAI;IAChC,MAAM,WAAW,OAAO;IACxB,MAAM,iBAAiB,cAAc,KAAK,CAAC,YAAY;IAEvD,4CAA4C;IAC5C,MAAM,WAAW;QACf,MAAM;QACN,YAAY;YACV,OAAO,cAAc,MAAM;YAC3B;YACA;YACA,OAAO,KAAK,IAAI,CAAC,cAAc,MAAM,GAAG;QAC1C;IACF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,+EAA+E;QAC/E,qDAAqD;QACrD,MAAM,UAAgB;YACpB,IAAI,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;YAC5C,GAAG,IAAI;YACP,WAAW,IAAI,OAAO,WAAW;YACjC,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClD,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}