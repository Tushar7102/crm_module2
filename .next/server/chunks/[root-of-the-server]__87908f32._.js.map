{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tushar/OneDrive/Desktop/crm_module/client/src/app/api/tickets/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { ServiceTicket } from '@/types';\n\n// Mock database of service tickets\nconst mockTickets: ServiceTicket[] = [\n  {\n    id: '1',\n    title: 'Software installation issue',\n    description: 'Unable to install the latest update on client machine',\n    status: 'open',\n    priority: 'medium',\n    category: 'software_installation',\n    assignedTo: '3', // Mike Johnson's ID\n    customerId: '1', // Acme Corp\n    createdBy: '2', // Jane Smith\n    createdAt: '2023-07-10T09:30:00.000Z',\n    updatedAt: '2023-07-10T09:30:00.000Z',\n    resolvedAt: null,\n  },\n  {\n    id: '2',\n    title: 'Login authentication failure',\n    description: 'Users unable to login to the system after password reset',\n    status: 'in_progress',\n    priority: 'high',\n    category: 'authentication',\n    assignedTo: '3', // Mike Johnson's ID\n    customerId: '2', // XYZ Industries\n    createdBy: '2', // Jane Smith\n    createdAt: '2023-07-08T14:15:00.000Z',\n    updatedAt: '2023-07-09T10:45:00.000Z',\n    resolvedAt: null,\n  },\n  {\n    id: '3',\n    title: 'Data migration request',\n    description: 'Need assistance with migrating data from legacy system',\n    status: 'open',\n    priority: 'low',\n    category: 'data_migration',\n    assignedTo: null, // Not assigned yet\n    customerId: '3', // Global Tech Solutions\n    createdBy: '1', // John Doe\n    createdAt: '2023-07-07T11:20:00.000Z',\n    updatedAt: '2023-07-07T11:20:00.000Z',\n    resolvedAt: null,\n  },\n  {\n    id: '4',\n    title: 'Report generation error',\n    description: 'Monthly sales report fails to generate with error code E-501',\n    status: 'resolved',\n    priority: 'medium',\n    category: 'reporting',\n    assignedTo: '3', // Mike Johnson's ID\n    customerId: '5', // Innovative Solutions\n    createdBy: '2', // Jane Smith\n    createdAt: '2023-07-05T16:30:00.000Z',\n    updatedAt: '2023-07-06T13:45:00.000Z',\n    resolvedAt: '2023-07-06T13:45:00.000Z',\n  },\n  {\n    id: '5',\n    title: 'Feature enhancement request',\n    description: 'Add ability to export data in CSV format',\n    status: 'on_hold',\n    priority: 'low',\n    category: 'feature_request',\n    assignedTo: '3', // Mike Johnson's ID\n    customerId: '1', // Acme Corp\n    createdBy: '1', // John Doe\n    createdAt: '2023-07-03T10:15:00.000Z',\n    updatedAt: '2023-07-04T09:30:00.000Z',\n    resolvedAt: null,\n  },\n];\n\nexport async function GET(request: Request) {\n  // Get URL parameters for filtering and pagination\n  const { searchParams } = new URL(request.url);\n  const status = searchParams.get('status');\n  const priority = searchParams.get('priority');\n  const assignedTo = searchParams.get('assignedTo');\n  const customerId = searchParams.get('customerId');\n  const page = parseInt(searchParams.get('page') || '1');\n  const limit = parseInt(searchParams.get('limit') || '10');\n\n  // Apply filters\n  let filteredTickets = [...mockTickets];\n  \n  if (status) {\n    filteredTickets = filteredTickets.filter(ticket => ticket.status === status);\n  }\n  \n  if (priority) {\n    filteredTickets = filteredTickets.filter(ticket => ticket.priority === priority);\n  }\n  \n  if (assignedTo) {\n    filteredTickets = filteredTickets.filter(ticket => ticket.assignedTo === assignedTo);\n  }\n  \n  if (customerId) {\n    filteredTickets = filteredTickets.filter(ticket => ticket.customerId === customerId);\n  }\n\n  // Sort by most recent\n  filteredTickets.sort((a, b) => {\n    return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n  });\n\n  // Apply pagination\n  const startIndex = (page - 1) * limit;\n  const endIndex = page * limit;\n  const paginatedTickets = filteredTickets.slice(startIndex, endIndex);\n\n  // Prepare response with pagination metadata\n  const response = {\n    data: paginatedTickets,\n    pagination: {\n      total: filteredTickets.length,\n      page,\n      limit,\n      pages: Math.ceil(filteredTickets.length / limit),\n    },\n  };\n\n  return NextResponse.json(response);\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    \n    // In a real application, you would validate and save the ticket to your database\n    // For now, we'll just return the ticket with a mock ID\n    const newTicket: ServiceTicket = {\n      id: Math.random().toString(36).substring(2, 9), // Generate a random ID\n      ...body,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      resolvedAt: null,\n    };\n    \n    return NextResponse.json(newTicket, { status: 201 });\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to create service ticket' },\n      { status: 400 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}