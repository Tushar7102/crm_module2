{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tushar/OneDrive/Desktop/crm_module/client/src/app/api/leads/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { Lead } from '@/types';\n\n// Mock database of leads\nconst mockLeads: Lead[] = [\n  {\n    id: '1',\n    name: 'Acme Corporation',\n    contactName: 'John Smith',\n    email: 'john.smith@acme.com',\n    phone: '+1 (555) 123-4567',\n    status: 'new',\n    source: 'website',\n    assignedTo: '2', // Jane Smith's ID\n    notes: 'Interested in our enterprise solution',\n    createdAt: '2023-06-15T10:30:00.000Z',\n    updatedAt: '2023-06-15T10:30:00.000Z',\n  },\n  {\n    id: '2',\n    name: 'XYZ Industries',\n    contactName: 'Sarah Johnson',\n    email: 'sarah.j@xyz-industries.com',\n    phone: '+1 (555) 987-6543',\n    status: 'contacted',\n    source: 'referral',\n    assignedTo: '2', // Jane Smith's ID\n    notes: 'Follow up after initial call',\n    createdAt: '2023-06-10T14:45:00.000Z',\n    updatedAt: '2023-06-12T09:15:00.000Z',\n  },\n  {\n    id: '3',\n    name: 'Global Tech Solutions',\n    contactName: 'Michael Brown',\n    email: 'm.brown@globaltech.com',\n    phone: '+1 (555) 456-7890',\n    status: 'qualified',\n    source: 'trade_show',\n    assignedTo: '3', // Mike Johnson's ID\n    notes: 'Met at Tech Expo 2023, very interested in our new product line',\n    createdAt: '2023-06-05T11:20:00.000Z',\n    updatedAt: '2023-06-08T16:30:00.000Z',\n  },\n  {\n    id: '4',\n    name: 'Sunshine Retail',\n    contactName: 'Emma Wilson',\n    email: 'emma@sunshineretail.com',\n    phone: '+1 (555) 789-0123',\n    status: 'unqualified',\n    source: 'cold_call',\n    assignedTo: '2', // Jane Smith's ID\n    notes: 'Not interested at this time, revisit in 6 months',\n    createdAt: '2023-06-02T09:10:00.000Z',\n    updatedAt: '2023-06-03T13:45:00.000Z',\n  },\n  {\n    id: '5',\n    name: 'Innovative Solutions Inc',\n    contactName: 'David Lee',\n    email: 'david.lee@innovative.com',\n    phone: '+1 (555) 234-5678',\n    status: 'new',\n    source: 'email_campaign',\n    assignedTo: '3', // Mike Johnson's ID\n    notes: 'Responded to our Q2 email campaign',\n    createdAt: '2023-06-01T15:30:00.000Z',\n    updatedAt: '2023-06-01T15:30:00.000Z',\n  },\n  // Add more leads with different IDs\n  {\n    id: '6864be1',\n    name: 'New Potential Client',\n    contactName: 'Alex Johnson',\n    email: 'alex.johnson@example.com',\n    phone: '+1 (555) 111-2222',\n    status: 'new',\n    source: 'website',\n    assignedTo: '2',\n    notes: 'Interested in our services',\n    createdAt: '2023-07-01T09:00:00.000Z',\n    updatedAt: '2023-07-01T09:00:00.000Z',\n  },\n  // Add a lead with the exact ID from the error message (without any quotes or spaces)\n  {\n    id: 'aee50d22',\n    name: 'Tech Innovators Ltd',\n    contactName: 'Emily Chen',\n    email: 'emily.chen@techinnovators.com',\n    phone: '+1 (555) 333-4444',\n    status: 'contacted',\n    source: 'referral',\n    assignedTo: '3',\n    notes: 'Looking for enterprise solutions',\n    createdAt: '2023-08-15T14:30:00.000Z',\n    updatedAt: '2023-08-16T09:45:00.000Z',\n  },\n];\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  // Access params directly without awaiting\n  // Clean the ID parameter to ensure it doesn't have any extra characters\n  const id = params.id.trim();\n  console.log('GET request for lead with ID:', id);\n  \n  // Log all available lead IDs for debugging\n  console.log('Available lead IDs:', mockLeads.map(l => l.id));\n  \n  // Try to find the lead by exact ID match first\n  let lead = mockLeads.find((l) => l.id === id);\n  \n  // If not found, try case-insensitive match\n  if (!lead) {\n    lead = mockLeads.find((l) => l.id.toLowerCase() === id.toLowerCase());\n  }\n  \n  // If still not found, try to find if the ID is contained in any lead ID\n  if (!lead) {\n    lead = mockLeads.find((l) => l.id.includes(id) || id.includes(l.id));\n  }\n\n  if (!lead) {\n    console.log('Lead not found with ID:', id);\n    return NextResponse.json(\n      { error: 'Lead not found' },\n      { status: 404 }\n    );\n  }\n\n  console.log('Lead found:', lead);\n  return NextResponse.json(lead);\n}\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const body = await request.json();\n    // Clean the ID parameter to ensure it doesn't have any extra characters\n    const id = params.id.trim();\n    console.log('PUT request for lead with ID:', id);\n    \n    // Try to find the lead by exact ID match first\n    let leadIndex = mockLeads.findIndex((l) => l.id === id);\n    \n    // If not found, try case-insensitive match\n    if (leadIndex === -1) {\n      leadIndex = mockLeads.findIndex((l) => l.id.toLowerCase() === id.toLowerCase());\n    }\n    \n    // If still not found, try to find if the ID is contained in any lead ID\n    if (leadIndex === -1) {\n      leadIndex = mockLeads.findIndex((l) => l.id.includes(id) || id.includes(l.id));\n    }\n\n    if (leadIndex === -1) {\n      console.log('Lead not found with ID:', id);\n      return NextResponse.json(\n        { error: 'Lead not found' },\n        { status: 404 }\n      );\n    }\n\n    // In a real application, you would update the lead in your database\n    // For now, we'll just return the updated lead\n    const updatedLead: Lead = {\n      ...mockLeads[leadIndex],\n      ...body,\n      id: mockLeads[leadIndex].id, // Ensure ID doesn't change\n      updatedAt: new Date().toISOString(),\n    };\n\n    console.log('Lead updated:', updatedLead);\n    return NextResponse.json(updatedLead);\n  } catch (error) {\n    console.error('Error updating lead:', error);\n    return NextResponse.json(\n      { error: 'Failed to update lead' },\n      { status: 400 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  // Clean the ID parameter to ensure it doesn't have any extra characters\n  const id = params.id.trim();\n  console.log('DELETE request for lead with ID:', id);\n  \n  // Try to find the lead by exact ID match first\n  let leadIndex = mockLeads.findIndex((l) => l.id === id);\n  \n  // If not found, try case-insensitive match\n  if (leadIndex === -1) {\n    leadIndex = mockLeads.findIndex((l) => l.id.toLowerCase() === id.toLowerCase());\n  }\n  \n  // If still not found, try to find if the ID is contained in any lead ID\n  if (leadIndex === -1) {\n    leadIndex = mockLeads.findIndex((l) => l.id.includes(id) || id.includes(l.id));\n  }\n\n  if (leadIndex === -1) {\n    console.log('Lead not found with ID:', id);\n    return NextResponse.json(\n      { error: 'Lead not found' },\n      { status: 404 }\n    );\n  }\n\n  // In a real application, you would delete the lead from your database\n  // or mark it as deleted\n  console.log('Lead deleted with ID:', mockLeads[leadIndex].id);\n  \n  return NextResponse.json(\n    { message: 'Lead deleted successfully' },\n    { status: 200 }\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}