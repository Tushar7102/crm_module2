{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tushar/OneDrive/Desktop/crm_module/client/src/services/auth-service.ts"],"sourcesContent":["import { toast } from 'sonner';\n\n// Types for authentication\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  department?: string;\n  avatar?: string;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  name: string;\n  email: string;\n  password: string;\n  role: string;\n  department: string;\n  phone: string;\n}\n\nexport interface AuthResponse {\n  user: User;\n  token: string;\n}\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';\n\n/**\n * Service for handling authentication related API calls\n */\nexport const AuthService = {\n  /**\n   * Login a user with email and password\n   */\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    try {\n      const response = await fetch(`${API_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.msg || errorData.message || 'Login failed');\n      }\n\n      const data = await response.json();\n      \n      // Store token in localStorage\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      \n      // Also set token in cookie for middleware authentication\n      document.cookie = `auth-token=${data.token}; path=/; max-age=86400; SameSite=Strict`;\n      \n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      toast.error(error instanceof Error ? error.message : 'Login failed');\n      throw error;\n    }\n  },\n\n  /**\n   * Register a new user\n   */\n  register: async (userData: RegisterData): Promise<AuthResponse> => {\n    try {\n      console.log('Sending registration data:', userData);\n      const response = await fetch(`${API_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Server response error:', errorData);\n        throw new Error(errorData.msg || errorData.message || 'Registration failed');\n      }\n\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      toast.error(error instanceof Error ? error.message : 'Registration failed');\n      throw error;\n    }\n  },\n\n  /**\n   * Logout the current user\n   */\n  logout: (): void => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // Remove the auth token cookie\n    document.cookie = 'auth-token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Strict';\n    // Optionally call the backend to invalidate the token\n  },\n\n  /**\n   * Get the current authenticated user\n   */\n  getCurrentUser: (): User | null => {\n    const userStr = localStorage.getItem('user');\n    if (!userStr) return null;\n    \n    try {\n      return JSON.parse(userStr) as User;\n    } catch (error) {\n      console.error('Error parsing user data:', error);\n      return null;\n    }\n  },\n\n  /**\n   * Check if a user is authenticated\n   */\n  isAuthenticated: (): boolean => {\n    return !!localStorage.getItem('token');\n  },\n\n  /**\n   * Get the authentication token\n   */\n  getToken: (): string | null => {\n    return localStorage.getItem('token');\n  },\n\n  /**\n   * Update user profile\n   */\n  updateProfile: async (userData: Partial<User>): Promise<User> => {\n    try {\n      const token = AuthService.getToken();\n      if (!token) throw new Error('Not authenticated');\n\n      const response = await fetch(`${API_URL}/auth/profile`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(userData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Profile update failed');\n      }\n\n      const data = await response.json();\n      \n      // Update stored user data\n      const currentUser = AuthService.getCurrentUser();\n      if (currentUser) {\n        const updatedUser = { ...currentUser, ...data.user };\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n      }\n      \n      return data.user;\n    } catch (error) {\n      console.error('Profile update error:', error);\n      toast.error(error instanceof Error ? error.message : 'Profile update failed');\n      throw error;\n    }\n  },\n\n  /**\n   * Change user password\n   */\n  changePassword: async (currentPassword: string, newPassword: string): Promise<void> => {\n    try {\n      const token = AuthService.getToken();\n      if (!token) throw new Error('Not authenticated');\n\n      const response = await fetch(`${API_URL}/auth/change-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({ currentPassword, newPassword }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Password change failed');\n      }\n\n      toast.success('Password changed successfully');\n    } catch (error) {\n      console.error('Password change error:', error);\n      toast.error(error instanceof Error ? error.message : 'Password change failed');\n      throw error;\n    }\n  },\n};\n\nexport default AuthService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tushar/OneDrive/Desktop/crm_module/client/src/services/opportunity-service.ts"],"sourcesContent":["import { toast } from 'sonner';\nimport AuthService from './auth-service';\n\n// Types for opportunities\nexport interface Opportunity {\n  id: string;\n  name: string;\n  leadId?: string;\n  clientName: string;\n  value: number;\n  stage: string;\n  probability: number;\n  expectedCloseDate: string;\n  description?: string;\n  assignedTo?: string;\n  products?: string[];\n  createdAt: string;\n  updatedAt?: string;\n}\n\nexport interface OpportunityFormData {\n  name: string;\n  leadId?: string;\n  clientName: string;\n  value: number;\n  stage: string;\n  probability: number;\n  expectedCloseDate: string;\n  description?: string;\n  products?: string[];\n}\n\nexport interface OpportunityFilters {\n  stage?: string;\n  assignedTo?: string;\n  minValue?: number;\n  maxValue?: number;\n  dateRange?: {\n    from: string;\n    to: string;\n  };\n  searchTerm?: string;\n}\n\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';\n\n/**\n * Service for handling opportunity-related API calls\n */\nexport const OpportunityService = {\n  /**\n   * Get all opportunities with optional filtering\n   */\n  getOpportunities: async (filters?: OpportunityFilters): Promise<Opportunity[]> => {\n    try {\n      const token = AuthService.getToken();\n      if (!token) throw new Error('Not authenticated');\n\n      // Build query string from filters\n      let queryString = '';\n      if (filters) {\n        const params = new URLSearchParams();\n        if (filters.stage) params.append('stage', filters.stage);\n        if (filters.assignedTo) params.append('assignedTo', filters.assignedTo);\n        if (filters.minValue) params.append('minValue', filters.minValue.toString());\n        if (filters.maxValue) params.append('maxValue', filters.maxValue.toString());\n        if (filters.searchTerm) params.append('search', filters.searchTerm);\n        if (filters.dateRange) {\n          params.append('fromDate', filters.dateRange.from);\n          params.append('toDate', filters.dateRange.to);\n        }\n        queryString = `?${params.toString()}`;\n      }\n\n      const response = await fetch(`${API_URL}/sales/opportunities${queryString}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch opportunities');\n      }\n\n      const data = await response.json();\n      return data.opportunities;\n    } catch (error) {\n      console.error('Error fetching opportunities:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to fetch opportunities');\n      throw error;\n    }\n  },\n\n  /**\n   * Get a single opportunity by ID\n   */\n  getOpportunity: async (id: string): Promise<Opportunity> => {\n    try {\n      const token = AuthService.getToken();\n      if (!token) throw new Error('Not authenticated');\n\n      const response = await fetch(`${API_URL}/sales/opportunities/${id}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch opportunity');\n      }\n\n      const data = await response.json();\n      return data.opportunity;\n    } catch (error) {\n      console.error(`Error fetching opportunity ${id}:`, error);\n      toast.error(error instanceof Error ? error.message : 'Failed to fetch opportunity');\n      throw error;\n    }\n  },\n\n  /**\n   * Create a new opportunity\n   */\n  createOpportunity: async (opportunityData: OpportunityFormData): Promise<Opportunity> => {\n    try {\n      const token = AuthService.getToken();\n      if (!token) throw new Error('Not authenticated');\n\n      const response = await fetch(`${API_URL}/sales/opportunities`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(opportunityData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to create opportunity');\n      }\n\n      const data = await response.json();\n      toast.success('Opportunity created successfully');\n      return data.opportunity;\n    } catch (error) {\n      console.error('Error creating opportunity:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to create opportunity');\n      throw error;\n    }\n  },\n\n  /**\n   * Update an existing opportunity\n   */\n  updateOpportunity: async (id: string, opportunityData: Partial<Opportunity>): Promise<Opportunity> => {\n    try {\n      const token = AuthService.getToken();\n      if (!token) throw new Error('Not authenticated');\n\n      const response = await fetch(`${API_URL}/sales/opportunities/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(opportunityData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to update opportunity');\n      }\n\n      const data = await response.json();\n      toast.success('Opportunity updated successfully');\n      return data.opportunity;\n    } catch (error) {\n      console.error(`Error updating opportunity ${id}:`, error);\n      toast.error(error instanceof Error ? error.message : 'Failed to update opportunity');\n      throw error;\n    }\n  },\n\n  /**\n   * Delete an opportunity\n   */\n  deleteOpportunity: async (id: string): Promise<void> => {\n    try {\n      const token = AuthService.getToken();\n      if (!token) throw new Error('Not authenticated');\n\n      const response = await fetch(`${API_URL}/sales/opportunities/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to delete opportunity');\n      }\n\n      toast.success('Opportunity deleted successfully');\n    } catch (error) {\n      console.error(`Error deleting opportunity ${id}:`, error);\n      toast.error(error instanceof Error ? error.message : 'Failed to delete opportunity');\n      throw error;\n    }\n  },\n\n  /**\n   * Change the stage of an opportunity\n   */\n  changeOpportunityStage: async (id: string, stage: string): Promise<Opportunity> => {\n    try {\n      const token = AuthService.getToken();\n      if (!token) throw new Error('Not authenticated');\n\n      const response = await fetch(`${API_URL}/sales/opportunities/${id}/stage`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({ stage }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to update opportunity stage');\n      }\n\n      const data = await response.json();\n      toast.success(`Opportunity stage updated to ${stage}`);\n      return data.opportunity;\n    } catch (error) {\n      console.error(`Error updating opportunity stage ${id}:`, error);\n      toast.error(error instanceof Error ? error.message : 'Failed to update opportunity stage');\n      throw error;\n    }\n  },\n\n  /**\n   * Assign an opportunity to a user\n   */\n  assignOpportunity: async (id: string, userId: string): Promise<Opportunity> => {\n    try {\n      const token = AuthService.getToken();\n      if (!token) throw new Error('Not authenticated');\n\n      const response = await fetch(`${API_URL}/sales/opportunities/${id}/assign`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify({ assignedTo: userId }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to assign opportunity');\n      }\n\n      const data = await response.json();\n      toast.success('Opportunity assigned successfully');\n      return data.opportunity;\n    } catch (error) {\n      console.error(`Error assigning opportunity ${id}:`, error);\n      toast.error(error instanceof Error ? error.message : 'Failed to assign opportunity');\n      throw error;\n    }\n  },\n\n  /**\n   * Convert a lead to an opportunity\n   */\n  convertLeadToOpportunity: async (leadId: string, opportunityData: OpportunityFormData): Promise<Opportunity> => {\n    try {\n      const token = AuthService.getToken();\n      if (!token) throw new Error('Not authenticated');\n\n      const response = await fetch(`${API_URL}/sales/leads/${leadId}/convert`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n        },\n        body: JSON.stringify(opportunityData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to convert lead to opportunity');\n      }\n\n      const data = await response.json();\n      toast.success('Lead converted to opportunity successfully');\n      return data.opportunity;\n    } catch (error) {\n      console.error(`Error converting lead ${leadId} to opportunity:`, error);\n      toast.error(error instanceof Error ? error.message : 'Failed to convert lead to opportunity');\n      throw error;\n    }\n  },\n\n  /**\n   * Get opportunity statistics\n   */\n  getOpportunityStats: async (): Promise<{ \n    total: number; \n    totalValue: number;\n    byStage: Record<string, { count: number; value: number }>;\n    winRate: number;\n  }> => {\n    try {\n      const token = AuthService.getToken();\n      if (!token) throw new Error('Not authenticated');\n\n      const response = await fetch(`${API_URL}/sales/opportunities/stats`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch opportunity statistics');\n      }\n\n      const data = await response.json();\n      return data.stats;\n    } catch (error) {\n      console.error('Error fetching opportunity statistics:', error);\n      toast.error(error instanceof Error ? error.message : 'Failed to fetch opportunity statistics');\n      throw error;\n    }\n  },\n};\n\nexport default OpportunityService;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 490, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tushar/OneDrive/Desktop/crm_module/client/src/app/api/opportunities/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { Opportunity } from '@/types';\nimport { OpportunityService } from '@/services/opportunity-service';\nimport { cookies } from 'next/headers';\n\n\nexport async function GET(request: Request) {\n  try {\n    // Get URL parameters for filtering and pagination\n    const { searchParams } = new URL(request.url);\n    const stage = searchParams.get('stage');\n    const assignedTo = searchParams.get('assignedTo');\n    const minValue = searchParams.get('minValue') ? parseInt(searchParams.get('minValue') || '0') : undefined;\n    const maxValue = searchParams.get('maxValue') ? parseInt(searchParams.get('maxValue') || '0') : undefined;\n    const searchTerm = searchParams.get('search') || undefined;\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '10');\n    \n    // Build filters object for the service\n    const filters = {\n      stage,\n      assignedTo,\n      minValue,\n      maxValue,\n      searchTerm,\n      page,\n      limit\n    };\n    \n    // Use the opportunity service to fetch data from the backend\n    const opportunities = await OpportunityService.getOpportunities(filters);\n    \n    // Prepare response with pagination metadata in the format expected by the frontend\n    const response = {\n      opportunities: opportunities,\n      totalOpportunities: opportunities.length, // This should ideally come from the backend\n      totalPages: Math.ceil(opportunities.length / limit),\n      page,\n      limit,\n    };\n    \n    return NextResponse.json(response);\n  } catch (error) {\n    console.error('Error fetching opportunities:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch opportunities' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    \n    // Use the opportunity service to create a new opportunity\n    const newOpportunity = await OpportunityService.createOpportunity(body);\n    \n    return NextResponse.json(newOpportunity, { status: 201 });\n  } catch (error) {\n    console.error('Error creating opportunity:', error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Failed to create opportunity' },\n      { status: 400 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAIO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,kDAAkD;QAClD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC;QAC/B,MAAM,aAAa,aAAa,GAAG,CAAC;QACpC,MAAM,WAAW,aAAa,GAAG,CAAC,cAAc,SAAS,aAAa,GAAG,CAAC,eAAe,OAAO;QAChG,MAAM,WAAW,aAAa,GAAG,CAAC,cAAc,SAAS,aAAa,GAAG,CAAC,eAAe,OAAO;QAChG,MAAM,aAAa,aAAa,GAAG,CAAC,aAAa;QACjD,MAAM,OAAO,SAAS,aAAa,GAAG,CAAC,WAAW;QAClD,MAAM,QAAQ,SAAS,aAAa,GAAG,CAAC,YAAY;QAEpD,uCAAuC;QACvC,MAAM,UAAU;YACd;YACA;YACA;YACA;YACA;YACA;YACA;QACF;QAEA,6DAA6D;QAC7D,MAAM,gBAAgB,MAAM,2IAAA,CAAA,qBAAkB,CAAC,gBAAgB,CAAC;QAEhE,mFAAmF;QACnF,MAAM,WAAW;YACf,eAAe;YACf,oBAAoB,cAAc,MAAM;YACxC,YAAY,KAAK,IAAI,CAAC,cAAc,MAAM,GAAG;YAC7C;YACA;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAgC,GACzC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,0DAA0D;QAC1D,MAAM,iBAAiB,MAAM,2IAAA,CAAA,qBAAkB,CAAC,iBAAiB,CAAC;QAElE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,gBAAgB;YAAE,QAAQ;QAAI;IACzD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAA+B,GACjF;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}