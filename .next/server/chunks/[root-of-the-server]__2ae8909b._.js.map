{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tushar/OneDrive/Desktop/crm_module/client/src/app/api/leads/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { Lead } from '@/types';\n\n\n\nexport async function GET(request: Request) {\n  // Get URL parameters for filtering and pagination\n  const { searchParams } = new URL(request.url);\n  const status = searchParams.get('status');\n  const source = searchParams.get('source');\n  const assignedTo = searchParams.get('assignedTo');\n  const page = parseInt(searchParams.get('page') || '1');\n  const limit = parseInt(searchParams.get('limit') || '10');\n\n  // Apply filters\n  let filteredLeads = [...mockLeads];\n  \n  if (status) {\n    filteredLeads = filteredLeads.filter(lead => lead.status === status);\n  }\n  \n  if (source) {\n    filteredLeads = filteredLeads.filter(lead => lead.source === source);\n  }\n  \n  if (assignedTo) {\n    filteredLeads = filteredLeads.filter(lead => lead.assignedTo === assignedTo);\n  }\n\n  // Sort by most recent\n  filteredLeads.sort((a, b) => {\n    return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n  });\n\n  // Apply pagination\n  const startIndex = (page - 1) * limit;\n  const endIndex = page * limit;\n  const paginatedLeads = filteredLeads.slice(startIndex, endIndex);\n\n  // Prepare response with pagination metadata\n  const response = {\n    data: paginatedLeads,\n    pagination: {\n      total: filteredLeads.length,\n      page,\n      limit,\n      pages: Math.ceil(filteredLeads.length / limit),\n    },\n  };\n\n  return NextResponse.json(response);\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    \n    // In a real application, you would validate and save the lead to your database\n    // For now, we'll just return the lead with a mock ID\n    const newLead: Lead = {\n      id: Math.random().toString(36).substring(2, 9), // Generate a random ID\n      ...body,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    \n    return NextResponse.json(newLead, { status: 201 });\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to create lead' },\n      { status: 400 }\n    );\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAKO,eAAe,IAAI,OAAgB;IACxC,kDAAkD;IAClD,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,SAAS,aAAa,GAAG,CAAC;IAChC,MAAM,SAAS,aAAa,GAAG,CAAC;IAChC,MAAM,aAAa,aAAa,GAAG,CAAC;IACpC,MAAM,OAAO,SAAS,aAAa,GAAG,CAAC,WAAW;IAClD,MAAM,QAAQ,SAAS,aAAa,GAAG,CAAC,YAAY;IAEpD,gBAAgB;IAChB,IAAI,gBAAgB;WAAI;KAAU;IAElC,IAAI,QAAQ;QACV,gBAAgB,cAAc,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,KAAK;IAC/D;IAEA,IAAI,QAAQ;QACV,gBAAgB,cAAc,MAAM,CAAC,CAAA,OAAQ,KAAK,MAAM,KAAK;IAC/D;IAEA,IAAI,YAAY;QACd,gBAAgB,cAAc,MAAM,CAAC,CAAA,OAAQ,KAAK,UAAU,KAAK;IACnE;IAEA,sBAAsB;IACtB,cAAc,IAAI,CAAC,CAAC,GAAG;QACrB,OAAO,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO;IACxE;IAEA,mBAAmB;IACnB,MAAM,aAAa,CAAC,OAAO,CAAC,IAAI;IAChC,MAAM,WAAW,OAAO;IACxB,MAAM,iBAAiB,cAAc,KAAK,CAAC,YAAY;IAEvD,4CAA4C;IAC5C,MAAM,WAAW;QACf,MAAM;QACN,YAAY;YACV,OAAO,cAAc,MAAM;YAC3B;YACA;YACA,OAAO,KAAK,IAAI,CAAC,cAAc,MAAM,GAAG;QAC1C;IACF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,+EAA+E;QAC/E,qDAAqD;QACrD,MAAM,UAAgB;YACpB,IAAI,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;YAC5C,GAAG,IAAI;YACP,WAAW,IAAI,OAAO,WAAW;YACjC,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClD,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tushar/OneDrive/Desktop/crm_module/client/src/app/api/leads/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { Lead } from '@/types';\n\n// Import mockLeads from the leads route file\nimport { mockLeads } from '../route';\n\nexport async function GET(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Ensure params is properly handled as it should be awaited in Next.js App Router\n    const { id } = await params;\n    \n    // Find the lead in our mock database\n    const lead = mockLeads.find((l) => l.id === id);\n\n    if (!lead) {\n      return NextResponse.json(\n        { error: 'Lead not found' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json(lead);\n  } catch (error) {\n    console.error('Error fetching lead:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch lead' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Ensure params is properly handled as it should be awaited in Next.js App Router\n    const { id } = await params;\n    \n    const body = await request.json();\n    const leadIndex = mockLeads.findIndex((l) => l.id === id);\n\n    if (leadIndex === -1) {\n      return NextResponse.json(\n        { error: 'Lead not found' },\n        { status: 404 }\n      );\n    }\n\n    // In a real application, you would update the lead in your database\n    // For now, we'll just return the updated lead\n    const updatedLead: Lead = {\n      ...mockLeads[leadIndex],\n      ...body,\n      id: id, // Ensure ID doesn't change\n      updatedAt: new Date().toISOString(),\n    };\n    \n    // Update the lead in our mock database\n    mockLeads[leadIndex] = updatedLead;\n\n    return NextResponse.json(updatedLead);\n  } catch (error) {\n    console.error('Error updating lead:', error);\n    return NextResponse.json(\n      { error: 'Failed to update lead' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function DELETE(\n  request: Request,\n  { params }: { params: { id: string } }\n) {\n  try {\n    // Ensure params is properly handled as it should be awaited in Next.js App Router\n    const { id } = await params;\n    \n    const leadIndex = mockLeads.findIndex((l) => l.id === id);\n\n    if (leadIndex === -1) {\n      return NextResponse.json(\n        { error: 'Lead not found' },\n        { status: 404 }\n      );\n    }\n\n    // In a real application, you would delete the lead from your database\n    // For now, we'll just simulate deletion by removing from our mock array\n    mockLeads.splice(leadIndex, 1);\n    \n    return NextResponse.json(\n      { message: 'Lead deleted successfully' },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error('Error deleting lead:', error);\n    return NextResponse.json(\n      { error: 'Failed to delete lead' },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;;;AAAA;AAGA,6CAA6C;AAC7C;;;AAEO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,kFAAkF;QAClF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QAErB,qCAAqC;QACrC,MAAM,OAAO,qIAAA,CAAA,YAAS,CAAC,IAAI,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;QAE5C,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,kFAAkF;QAClF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QAErB,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,YAAY,qIAAA,CAAA,YAAS,CAAC,SAAS,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;QAEtD,IAAI,cAAc,CAAC,GAAG;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,oEAAoE;QACpE,8CAA8C;QAC9C,MAAM,cAAoB;YACxB,GAAG,qIAAA,CAAA,YAAS,CAAC,UAAU;YACvB,GAAG,IAAI;YACP,IAAI;YACJ,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,uCAAuC;QACvC,qIAAA,CAAA,YAAS,CAAC,UAAU,GAAG;QAEvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,IAAI;QACF,kFAAkF;QAClF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QAErB,MAAM,YAAY,qIAAA,CAAA,YAAS,CAAC,SAAS,CAAC,CAAC,IAAM,EAAE,EAAE,KAAK;QAEtD,IAAI,cAAc,CAAC,GAAG;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,sEAAsE;QACtE,wEAAwE;QACxE,qIAAA,CAAA,YAAS,CAAC,MAAM,CAAC,WAAW;QAE5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA4B,GACvC;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}