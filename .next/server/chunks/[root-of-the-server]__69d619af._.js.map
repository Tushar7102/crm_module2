{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tushar/OneDrive/Desktop/crm_module/client/src/app/api/opportunities/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { Opportunity } from '@/types';\n\n// Mock database of opportunities\nconst mockOpportunities: Opportunity[] = [\n  {\n    id: '1',\n    name: 'Enterprise Solution for Acme Corp',\n    leadId: '1',\n    value: 75000,\n    stage: 'proposal',\n    assignedTo: '2', // Jane Smi2th's ID\n    probability: 60,\n    expectedCloseDate: '2023-08-15T00:00:00.000Z',\n    notes: 'Proposal sent, awaiting feedback',\n    createdAt: '2023-06-20T10:30:00.000Z',\n    updatedAt: '2023-07-05T14:45:00.000Z',\n  },\n  {\n    id: '2',\n    name: 'Software Upgrade for XYZ Industries',\n    leadId: '2',\n    value: 45000,\n    stage: 'negotiation',\n    assignedTo: '2', // Jane Smith's ID\n    probability: 80,\n    expectedCloseDate: '2023-07-30T00:00:00.000Z',\n    notes: 'Final negotiation on pricing',\n    createdAt: '2023-06-15T09:20:00.000Z',\n    updatedAt: '2023-07-10T11:30:00.000Z',\n  },\n  {\n    id: '3',\n    name: 'New Product Line for Global Tech',\n    leadId: '3',\n    value: 120000,\n    stage: 'prospecting',\n    assignedTo: '3', // Mike Johnson's ID\n    probability: 40,\n    expectedCloseDate: '2023-09-30T00:00:00.000Z',\n    notes: 'Initial requirements gathering',\n    createdAt: '2023-06-25T13:15:00.000Z',\n    updatedAt: '2023-07-02T10:45:00.000Z',\n  },\n  {\n    id: '4',\n    name: 'Maintenance Contract for Innovative Solutions',\n    leadId: '5',\n    value: 35000,\n    stage: 'closed_won',\n    assignedTo: '3', // Mike Johnson's ID\n    probability: 100,\n    expectedCloseDate: '2023-07-01T00:00:00.000Z',\n    notes: 'Contract signed, implementation starting next week',\n    createdAt: '2023-06-10T11:30:00.000Z',\n    updatedAt: '2023-07-01T09:15:00.000Z',\n  },\n  {\n    id: '5',\n    name: 'Custom Development for ABC Company',\n    leadId: null, // Direct opportunity, not from a lead\n    value: 95000,\n    status: 'lost',\n    assignedTo: '2', // Jane Smith's ID\n    probability: 0,\n    expectedCloseDate: '2023-06-30T00:00:00.000Z',\n    notes: 'Lost to competitor due to pricing',\n    createdAt: '2023-05-20T14:30:00.000Z',\n    updatedAt: '2023-06-28T16:45:00.000Z',\n  },\n];\n\nexport async function GET(request: Request) {\n  // Get URL parameters for filtering and pagination\n  const { searchParams } = new URL(request.url);\n  const stage = searchParams.get('stage');\n  const assignedTo = searchParams.get('assignedTo');\n  const minValue = searchParams.get('minValue') ? parseInt(searchParams.get('minValue') || '0') : null;\n  const maxValue = searchParams.get('maxValue') ? parseInt(searchParams.get('maxValue') || '0') : null;\n  const page = parseInt(searchParams.get('page') || '1');\n  const limit = parseInt(searchParams.get('limit') || '10');\n\n  // Apply filters\n  let filteredOpportunities = [...mockOpportunities];\n  \n  if (stage) {\n    filteredOpportunities = filteredOpportunities.filter(opp => opp.stage === stage);\n  }\n  \n  if (assignedTo) {\n    filteredOpportunities = filteredOpportunities.filter(opp => opp.assignedTo === assignedTo);\n  }\n  \n  if (minValue !== null) {\n    filteredOpportunities = filteredOpportunities.filter(opp => opp.value >= minValue);\n  }\n  \n  if (maxValue !== null) {\n    filteredOpportunities = filteredOpportunities.filter(opp => opp.value <= maxValue);\n  }\n\n  // Sort by most recent\n  filteredOpportunities.sort((a, b) => {\n    return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n  });\n\n  // Apply pagination\n  const startIndex = (page - 1) * limit;\n  const endIndex = page * limit;\n  const paginatedOpportunities = filteredOpportunities.slice(startIndex, endIndex);\n\n  // Prepare response with pagination metadata\n  const response = {\n    data: paginatedOpportunities,\n    pagination: {\n      total: filteredOpportunities.length,\n      page,\n      limit,\n      pages: Math.ceil(filteredOpportunities.length / limit),\n    },\n  };\n\n  return NextResponse.json(response);\n}\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    \n    // In a real application, you would validate and save the opportunity to your database\n    // For now, we'll just return the opportunity with a mock ID\n    const newOpportunity: Opportunity = {\n      id: Math.random().toString(36).substring(2, 9), // Generate a random ID\n      ...body,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    \n    return NextResponse.json(newOpportunity, { status: 201 });\n  } catch (error) {\n    return NextResponse.json(\n      { error: 'Failed to create opportunity' },\n      { status: 400 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}